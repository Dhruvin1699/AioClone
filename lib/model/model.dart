class Autogenerated {
  bool? success;
  int? status;
  String? message;
  List<Data>? data;
  Paginate? paginate;
  Null? error;

  Autogenerated({this.success, this.status, this.message, this.data, this.paginate, this.error});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    success = json['success'];
    status = json['status'];
    message = json['message'];
    if (json['data'] != null) {
      data = <Data>[];
      json['data'].forEach((v) { data!.add(new Data.fromJson(v)); });
    }
    paginate = json['paginate'] != null ? new Paginate.fromJson(json['paginate']) : null;
    error = json['error'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['success'] = this.success;
    data['status'] = this.status;
    data['message'] = this.message;
    if (this.data != null) {
      data['data'] = this.data!.map((v) => v.toJson()).toList();
    }
    if (this.paginate != null) {
      data['paginate'] = this.paginate!.toJson();
    }
    data['error'] = this.error;
    return data;
  }
}

class Data {
  dynamic id;
  String? portfolioID;
  String? domainID;
  String? companyID;
  String? screenType;
  String? projectName;
  String? description;
  String? uRLLink;
  String? documents;
  bool? published;
  String? domainName;
  String? companyName;
  String? screenName;
  List<TechMapping>? techMapping;
  List<ImageMapping>? imageMapping;


  Data({this.id, this.portfolioID, this.domainID, this.companyID, this.screenType, this.projectName, this.description, this.uRLLink, this.documents, this.published, this.domainName, this.companyName, this.screenName, this.techMapping, this.imageMapping, required urlLink, required String formattedTechMapping,});

  Data.fromJson(Map<String, dynamic> json) {
    id = json['id'];

    portfolioID = json['PortfolioID'];
    domainID = json['DomainID'];
    companyID = json['CompanyID'];
    screenType = json['ScreenType'];
    projectName = json['ProjectName'];
    description = json['Description'];
    uRLLink = json['URLLink'];
    documents = json['Documents'];
    published = json['Published'];
    domainName = json['DomainName'];
    companyName = json['CompanyName'];
    screenName = json['ScreenName'];
    if (json['TechMapping'] != null) {
      techMapping = <TechMapping>[];
      json['TechMapping'].forEach((v) { techMapping!.add(new TechMapping.fromJson(v)); });
    }
    if (json['ImageMapping'] != null) {
      imageMapping = <ImageMapping>[];
      json['ImageMapping'].forEach((v) { imageMapping!.add(new ImageMapping.fromJson(v)); });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['id'] = this.id;
    data['PortfolioID'] = this.portfolioID;
    data['DomainID'] = this.domainID;
    data['CompanyID'] = this.companyID;
    data['ScreenType'] = this.screenType;
    data['ProjectName'] = this.projectName;
    data['Description'] = this.description;
    data['URLLink'] = this.uRLLink;
    data['Documents'] = this.documents;
    data['Published'] = this.published;
    data['DomainName'] = this.domainName;
    data['CompanyName'] = this.companyName;
    data['ScreenName'] = this.screenName;
    if (this.techMapping != null) {
      data['TechMapping'] = this.techMapping!.map((v) => v.toJson()).toList();
    }
    if (this.imageMapping != null) {
      data['ImageMapping'] = this.imageMapping!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class TechMapping {
  String? portfolioID;
  String? techID;
  String? techName;

  TechMapping({this.portfolioID, this.techID, this.techName});

  TechMapping.fromJson(Map<String, dynamic> json) {
    portfolioID = json['PortfolioID'];
    techID = json['TechID'];
    techName = json['TechName'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['PortfolioID'] = this.portfolioID;
    data['TechID'] = this.techID;
    data['TechName'] = this.techName;
    return data;
  }
}

class ImageMapping {
  String? portfolioID;
  String? portfolioImage;

  ImageMapping({this.portfolioID, this.portfolioImage});

  ImageMapping.fromJson(Map<String, dynamic> json) {
    portfolioID = json['PortfolioID'];
    portfolioImage = json['PortfolioImage'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['PortfolioID'] = this.portfolioID;
    data['PortfolioImage'] = this.portfolioImage;
    return data;
  }
}

class Paginate {


  Paginate();

Paginate.fromJson(Map<String, dynamic> json) {
}

Map<String, dynamic> toJson() {
final Map<String, dynamic> data = new Map<String, dynamic>();
return data;
}
}
